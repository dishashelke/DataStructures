//m(j) = maximum subsequence ending at j
//m(j) = max {m(j-1)+A[j], A[j]}

package maximumContiguousSubsequence;

import java.util.Collection;
import java.util.Collections;

public class MCS {

	public static int maxSubsequence(int[] array) {
		int max[];
		max[0] = array[0];
		for(int i = 1; i<array.length; i++) {
			max_ending_here = (max_ending_here > array[i]) ? (max_ending_here + array[i]) : array[i];
			max_so_far = (max_so_far > max_ending_here) ? max_so_far : max_ending_here; 
		}
		return Collections.max(Arrays.asList(ArrayUtils.toObject(max)));
	}
	
	public static void main(String[] args) {
		int[] array = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
		System.out.print(maxSubsequence(array));
	}

}
