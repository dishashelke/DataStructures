package BinaryTree;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class BinaryTree {
	  private BinaryNode root;
	  
	  public BinaryTree(){
	    root = null;
	  }
	  public BinaryNode getRoot() {
		  return root;
	  }
//************************ creating a tree ****************************  
		/*
      		7
	15          5
9      8    9      7
*/

	  public void createTree() {
	    root = new BinaryNode(7);
	    root.addLeftChild(15);
	    root.addRightChild(5);
	    
	    BinaryNode left = root.getLeftChild();
	    left.addLeftChild(9);
	    left.addRightChild(8);
	    
	    BinaryNode right = root.getRightChild();
	    right.addLeftChild(9);
	    right.addRightChild(7);
	  }
//*****************Symmetric tree ************************	  
	    public void createSymmetricTree() {
	    root = new BinaryNode(7);
	    root.addLeftChild(15);
	    root.addRightChild(15);
	    
	    BinaryNode left = root.getLeftChild();
	    left.addLeftChild(9);
	    left.addRightChild(8);
	    
	    BinaryNode right = root.getRightChild();
	    right.addLeftChild(8);
	    right.addRightChild(9);
	  }
//********************** BFS ********************	    
	  /*
	  Algorithm :
	  1. add root in queue 
	  2. while queue is not empty iterate
	  3. delete node from queue
	  4. print deleted node
	  5. add children of deleted nodes in queue	  
	  */
	public void bfs() {
		List<BinaryNode> order = new ArrayList<BinaryNode>();
		order.add(root);
		while (!order.isEmpty()) {
			BinaryNode current = order.remove(0);
			System.out.print(current.getData() + " ");
			if (current.getLeftChild() != null)
				order.add(current.getLeftChild());
			if (current.getRightChild() != null)
				order.add(current.getRightChild());
		}
	}
//********************* DFS ***************************  
	public void dfs() {
		Stack<BinaryNode> order = new Stack<BinaryNode>();
		order.push(root);
		while (!order.isEmpty()) {
			BinaryNode current = order.pop();
			System.out.print(current.getData() + " ");
			if (current.getRightChild() != null)
				order.push(current.getRightChild());
			if (current.getLeftChild() != null)
				order.push(current.getLeftChild());
		}
	}
	  
	  public void recursiveDFS() {
	    if(root != null)
	      root.dfs();
	  }
//******************** inorder, preorder, postorder *********************
	  public void inorder() {
	    if (root != null)
	      root.inorder();
	  }  
	  public void preorder() {
	    if(root != null)
	      root.preorder();
	  }
	  public void postorder() {
	    if(root != null)
	      root.postorder();
	  }
///********************* is tree BST ***********************	  
	  public boolean isBST() {
	    if(root == null)
	      return true;
	    return isBSTHelper(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
	  }
	  
	  /*
	    1. If left child and right child is null return true
	    2. If left is null and right not null
	      2.1 if !isBST(right,data,max) then return false
	    3. if left is not null and right is null
	      3.1 if !isBST(left,min,data) then return false
	    4. if both left and right are not null
	      4.1 if data < min || data > max then return false
	    5. return true
	     
	  */
	  private boolean isBSTHelper(BinaryNode current, int min, int max) {
	    if(current.getLeftChild() != null) {
	      if(current.getLeftChild().getData() < min || !isBSTHelper(current.getLeftChild(), min, current.getData()))
	        return false;
	    }
	    if(current.getRightChild() != null) {
	      if(current.getRightChild().getData() > max || !isBSTHelper(current.getRightChild(), current.getData(), max))
	        return false;
	    }
	    if(current.getData() < min || current.getData() > max)
	      return false;    
	    return true;
	  }
////////////////////////////////////////////////////////	  
	  public void modify() {
		  BinaryNode left = root.getLeftChild();
	    left.setData(-120);
	  }

	  /*
	            7
	      5            5
	  9      8    8        9
	            
	            7
	      5            5
	  8                    8
	  
	            7
	      5            5
	         7    7        
	         
	         
	          7 -> NOT
	      5         5
	  8         8        
	*/
	  /*
	  1. get levelwise list of nodes
	    1. create new list for each prev list ie. parent
	    2. add chidren to new list from parent list
	  2. check this list wheather palindrom
	  */
	  /////////////////////////////////////////////////
	  
	  /*
	                5
	          3          7
	      4       6
	      
	      
	                5
	          7          3
	                6        4	              
	                
	                
	     4
	   /   \
	  2     7
	 / \   / \
	1   3 6   9
	      
	      to
	      
	     4
	   /   \
	  7     2
	 / \   / \
	9   6 3   1
	  */
	  
	  /*
	  1. create a list and travere tree like bfs
	  */
	  
	  public void invert() {	   
	      invertHelper(root);    
	  }
	  public void invertHelper(BinaryNode current){    
	    if(current == null)
	    	return;
	    current.invertChildren();
	    invertHelper(current.getLeftChild());
	    invertHelper(current.getRightChild());
	  }

	  /****http://www.geeksforgeeks.org/symmetric-tree-tree-which-is-mirror-image-of-itself/***/
	  
	  public boolean isPalindrome(List<BinaryNode> order) {    
	    if(order.size()%2 != 0)
	      return false;
	    int count = order.size();
	    for(int i=0; i<order.size()/2; i++) {
	      if(order.get(i) == null && order.get(count-i-1) == null)
	        continue;
	      if(order.get(i) == null || order.get(count-i-1) == null)
	        return false;
	      if(order.get(i).getData() != order.get(count-i-1).getData())
	        return false;
	    }
	    return true;
	  }
	  
	  public boolean isSymmetric() {
	    List<BinaryNode> parent = new ArrayList<BinaryNode>();
	    List<BinaryNode> children = new ArrayList<BinaryNode>();
	    
	    parent.add(root);

	    while(!parent.isEmpty()) {
	      while(!parent.isEmpty()) {
	    	  BinaryNode current = parent.remove(0);      
	        if(current != null && current.getLeftChild() != null)
	          children.add(current.getLeftChild());
	        else if(current != null)
	          children.add(null);
	        if(current != null && current.getRightChild() != null)
	          children.add(current.getRightChild());
	        else if(current != null)
	          children.add(null);
	      }  
	      if (!isPalindrome(children))
	        return false;
	      parent = children;
	    }
	    return true;
	  }

	//*******count number of nodes in tree**********	  
	  public int size() {
	  	return size(root);
	  }
	  private int size(BinaryNode current) {
	  	if(current == null)
	  		return 0;
	  	return 1 + size(current.getLeftChild()) + size(current.getRightChild());
	  }
	  //*************Unary tree*******************
	  /*
	   * Unary tree- every node has same value
	   * 		    5
	   *   5				5
	   * 				5		5
	   */
	  public void createUnaryTree() {
		  root = new BinaryNode(5);
		    root.addLeftChild(5);
		    root.addRightChild(5);
	  }
	  public boolean isUnary() {
		  if(root == null)
			  return true;
		  return isUnary(root, root.getData());
	  }
	  public boolean isUnary(BinaryNode current, int value) {
		  if(current == null)
			  return true;
		  if(current.getData() != value)
			  return false;
		  return isUnary(current.getLeftChild(), value) && isUnary(current.getRightChild(), value);
	  }
	  //******************height of tree***************
	  /*Time complexity= O(n) since we traverse each node in tree
	   * height of tree is the number of edges in the longest path from root
	   */
	  public int height(){
		  return height(root);
	  }
	  private int height(BinaryNode current) {
		  if(current == null)
			  return -1;//height of leaf node is 0
		  return Math.max(height(current.getLeftChild()), height(current.getRightChild())) + 1;
	  }
	  //****************maximum value in tree***********
	  public int max(){
		  return max(root);
	  }
	  private int max(BinaryNode current) {
		  if(current == null)
			  return Integer.MIN_VALUE;
		  int max = current.getData();
		  int leftMax = max(current.getLeftChild());
		  int rightMax = max(current.getRightChild());
		  if(leftMax > max)
			  max = leftMax;
		  if(rightMax > max)
			  max = rightMax;
		  return max;
	  }
	  //****************************************
	  public static void main(String[] args) {
		    BinaryTree binaryTree = new BinaryTree();
		    binaryTree.createTree();
		    //binaryTree.inorder();
		    //System.out.println("\n"+binaryTree.isBST());
		    
		    /*binaryTree.createSymmetricTree();
		    System.out.println(binaryTree.isSymmetric());*/
		    
		    binaryTree.createTree();
		    binaryTree.inorder();
		    binaryTree.invert();
		    System.out.println();
		    binaryTree.inorder();
		    
		    /*binaryTree.createTree();
		    System.out.println(binaryTree.LCA(15,8).getData());*/
		    
		   /* binaryTree.createTree();
		   System.out.println(binaryTree.size());*/
		    
		    /*binaryTree.createUnaryTree();
		    System.out.println("Tree is unary:"+binaryTree.isUnary());*/
		    
		    System.out.println("\nHeight of tree="+binaryTree.height());
		    
		    System.out.println("\nMaximum element in tree="+binaryTree.max());
		  }
	 
	}
